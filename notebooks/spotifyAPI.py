{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "622feea4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import requests\n",
    "import time\n",
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e4a588df",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    with open(\"../keys/secret_key.json\") as secret_key_file:\n",
    "        secret_key_json = json.load(secret_key_file)\n",
    "        secret_key = secret_key_json.get(\"secret_key\")\n",
    "except FileNotFoundError:\n",
    "    try:\n",
    "        with open(\"../keys/secret_key.json\") as secret_key_file:\n",
    "            secret_key_json = json.load(secret_key_file)\n",
    "            secret_key = secret_key_json.get(\"secret_key\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error: {e}\")\n",
    "        print(\"Secret key not found\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "78de0a6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_token(secret_key):\n",
    "    url = \"https://accounts.spotify.com/api/token\"\n",
    "    headers = {\n",
    "        \"Authorization\": f\"Basic {secret_key}\",\n",
    "        \"Content-Type\" : \"application/x-www-form-urlencoded\"\n",
    "    }\n",
    "    data = {\n",
    "        \"grant_type\" : \"client_credentials\"\n",
    "    }\n",
    "    response = requests.post(url, data=data, headers=headers)\n",
    "    \n",
    "    return response.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "325ac084",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_available_genre_seeds():\n",
    "\n",
    "    url = \"https://api.spotify.com/v1/recommendations/available-genre-seeds\"\n",
    "\n",
    "    access_token = get_token().get(\"access_token\")\n",
    "    \n",
    "    headers = {\n",
    "        \"Authorization\" : f\"Bearer {access_token}\" ,\n",
    "        \"Content-Type\" : \"application/json\"\n",
    "    }\n",
    "\n",
    "    response = requests.get(url, headers=headers)\n",
    "\n",
    "    return response.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3c2cb5d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def recommendations(track_id = \"4nFAL2TKUOoAPQJ5DGGoTd\"):\n",
    "    \n",
    "    url = f\"https://api.spotify.com/v1/recommendations?seed_tracks={track_id}\"\n",
    "\n",
    "    access_token = get_token().get('access_token')\n",
    "\n",
    "    headers = {\n",
    "        \"Content-Type\" : \"application/json\",\n",
    "        \"Authorization\" : f\"Bearer {access_token}\"\n",
    "    }\n",
    "\n",
    "    response = requests.get(url, headers = headers)\n",
    "\n",
    "    return response.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e4830469",
   "metadata": {},
   "outputs": [],
   "source": [
    "def search(search_term=\"clay pigeons\", music_type=\"track,album\", limit=5):\n",
    "\n",
    "    time.sleep(1.5)\n",
    "\n",
    "    search_term = search_term.replace(' ', '%20').replace('&', '%26')\n",
    "    print(search_term)\n",
    "        \n",
    "    url = f\"https://api.spotify.com/v1/search?q={music_type}:{search_term}&type={music_type}&limit={limit}\"\n",
    "    print(url)\n",
    "\n",
    "    access_token = get_token().get('access_token')\n",
    "\n",
    "    headers = {\n",
    "        \"Content-Type\": \"application/json\",\n",
    "        \"Authorization\": f\"Bearer {access_token}\"\n",
    "    }\n",
    "\n",
    "    response = requests.get(url, headers=headers)\n",
    "\n",
    "    return response.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "763fc4c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_recs(**kwargs):\n",
    "    if kwargs.get('mode') == \"search\":\n",
    "        search_response = search(search_term=kwargs.get('name'), music_type='track')\n",
    "\n",
    "        items = search_response.get('tracks', {}).get('items', [])\n",
    "        if not items:\n",
    "            print(\"No matching tracks found.\")\n",
    "            return None\n",
    "\n",
    "        rec_id = items[0].get('id')\n",
    "\n",
    "        recs = recommendations(track_id=rec_id)\n",
    "        return recs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d275ac91",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_new_releases(country = \"US\", limit = 20, offset = 0):\n",
    "    url = f\"https://api.spotify.com/v1/browse/new-releases?country={country}&limit={limit}&offset={offset}\"\n",
    "\n",
    "    access_token = get_token().get('access_token')\n",
    "\n",
    "    headers = {\n",
    "        'Content-Type' : 'application/json',\n",
    "        'Authorization' : f'Bearer {access_token}'\n",
    "    }\n",
    "\n",
    "    response = requests.get(url, headers=headers)\n",
    "\n",
    "    return response.json().get('albums').get('items')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6f488670",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_album(id = '2T1qRB6zSSGdNgcTD3Dg8H', market = 'US'):\n",
    "    time.sleep(3)\n",
    "    url = f\"https://api.spotify.com/v1/albums/{id}\"\n",
    "\n",
    "    access_token = get_token().get('access_token')\n",
    "\n",
    "    headers = {\n",
    "        'Content-Type' : 'application/json',\n",
    "        'Authorization' : f'Bearer {access_token}'\n",
    "    }\n",
    "\n",
    "    response = requests.get(url, headers=headers)\n",
    "\n",
    "    return response.json().get('tracks').get('items')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2742c341",
   "metadata": {},
   "outputs": [],
   "source": [
    "def audio_features(track_id = \"4nFAL2TKUOoAPQJ5DGGoTd\"):\n",
    "    time.sleep(3)\n",
    "    url = f\"https://api.spotify.com/v1/audio-features/{track_id}\"\n",
    "    \n",
    "    access_token = get_token().get('access_token')\n",
    "\n",
    "    headers = {\n",
    "        'Content-Type' : 'application/json',\n",
    "        'Authorization' : f'Bearer {access_token}'\n",
    "    }\n",
    "    \n",
    "    response = requests.get(url, headers=headers)\n",
    "\n",
    "    return response.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "790d6a7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_several_albums(ids, market = \"US\"):\n",
    "    url = f\"https://api.spotify.com/v1/albums?ids={ids}\"\n",
    "    \n",
    "    access_token = get_token().get('access_token')\n",
    "\n",
    "    headers = {\n",
    "        'Content-Type' : 'application/json',\n",
    "        'Authorization' : f'Bearer {access_token}'\n",
    "    }\n",
    "    \n",
    "    response = requests.get(url, headers=headers)\n",
    "\n",
    "    return response.json().get('albums')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1cb65900",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_several_tracks(ids = \"7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ\"):\n",
    "    url = f\"https://api.spotify.com/v1/tracks?ids={ids}\"\n",
    "\n",
    "    access_token = get_token().get('access_token')\n",
    "\n",
    "    headers = {\n",
    "        'Content-Type' : 'application/json',\n",
    "        'Authorization' : f'Bearer {access_token}'\n",
    "    }\n",
    "\n",
    "    response = requests.get(url, headers=headers)\n",
    "\n",
    "    return response.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5b656e7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def new_release_features(limit = 20, offset = 0, country = \"US\"):\n",
    "\n",
    "    new_release_albums = get_new_releases(country = \"US\",\n",
    "                                          limit = limit,\n",
    "                                          offset = offset)\n",
    "    album_ids = [alb.get('id') for alb in new_release_albums]\n",
    "    album_request_string = \"\"\n",
    "    for index, id in enumerate(album_ids):\n",
    "        if index != (len(album_ids) - 1):\n",
    "          album_request_string += (id + ',')\n",
    "        else:\n",
    "            album_request_string += id\n",
    "    albums = get_several_albums(ids = album_request_string)\n",
    "\n",
    "    data  =[]\n",
    "    for alb in albums:\n",
    "        alb_tracks = alb.get('tracks').get('items')\n",
    "        for track in alb_tracks:\n",
    "            track_ids = [track.get('id') for track in alb_tracks]\n",
    "            for id in track_ids:\n",
    "                features = audio_features(track_id=id)\n",
    "                data.append(features)\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "92b6a2f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_playlist_tracks(playlist_id,offset):\n",
    "    url = f\"https://api.spotify.com/v1/playlists/{playlist_id}/tracks?offset={offset}\"\n",
    "    access_token = get_token().get('access_token')\n",
    "\n",
    "    headers = {\n",
    "        'Content-Type' : 'application/json',\n",
    "        'Authorization' : f'Bearer {access_token}'\n",
    "    }\n",
    "    \n",
    "    response = requests.get(url, headers=headers)\n",
    "\n",
    "    return response.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "dc382aad",
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_average_song(\n",
    "    seed_tracks=\"7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ\", \n",
    "    limit = 1,\n",
    "    market=\"US\",\n",
    "    acousticness=.5,\n",
    "    danceability=.5,\n",
    "    energy=.5,\n",
    "    instrumentalness=.5,\n",
    "    liveness = .5,\n",
    "    speechiness = .5,\n",
    "    valence=.4,\n",
    "):\n",
    "\n",
    "    url = f\"\"\"\n",
    "    https://api.spotify.com/v1/recommendations?seed_tracks={seed_tracks}&limit={limit}&market={market}&target_acousticness={acousticness}\n",
    "    \"\"\"\n",
    "    access_token = get_token().get('access_token')\n",
    "    \n",
    "    headers = {\n",
    "        'Content-Type' : 'application/json',\n",
    "        'Authorization' : f'Bearer {access_token}'\n",
    "    }\n",
    "\n",
    "    response = requests.get(url, headers=headers)\n",
    "    \n",
    "    return response.json()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
